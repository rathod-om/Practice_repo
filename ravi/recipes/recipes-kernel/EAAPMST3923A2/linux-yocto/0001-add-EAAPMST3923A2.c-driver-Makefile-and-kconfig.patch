From f1a06a8fb3cf01e6d7ffa13e392a4adb122a8dfb Mon Sep 17 00:00:00 2001
From: om <om.rathod@einfochips.com>
Date: Wed, 17 Sep 2025 17:53:06 +0530
Subject: [PATCH] add EAAPMST3923A2.c driver, Makefile and kconfig

---
 drivers/iio/light/eaapmst3923a2.c | 132 ++++++++++++++++++++++++++++++
 drivers/iio/light/Kconfig         |   7 ++
 drivers/iio/light/Makefile        |   1 +
 3 files changed, 140 insertions(+)
 create mode 100644 drivers/iio/light/eaapmst3923a2.c

diff --git a/drivers/iio/light/eaapmst3923a2.c b/drivers/iio/light/eaapmst3923a2.c
new file mode 100644
index 000000000000..fd2d80109088
--- /dev/null
+++ b/drivers/iio/light/eaapmst3923a2.c
@@ -0,0 +1,132 @@
+/*
+ * EAAPMST3923A2 Ambient Light + Proximity Sensor Driver (skeleton)
+ * For BeagleBone Black (I2C client)
+ */
+
+#include <linux/module.h>
+#include <linux/i2c.h>
+#include <linux/iio/iio.h>
+#include <linux/iio/sysfs.h>
+#include <linux/regmap.h>
+
+#define EAAPMST3923A2_REG_ALS_LOW   0x0C
+#define EAAPMST3923A2_REG_ALS_HIGH  0x0D
+#define EAAPMST3923A2_REG_PS_LOW    0x08
+#define EAAPMST3923A2_REG_PS_HIGH   0x09
+#define EAAPMST3923A2_REG_ENABLE    0x00
+
+struct eaapmst3923a2_data {
+	struct regmap *regmap;
+	struct i2c_client *client;
+};
+
+/* IIO read function */
+static int eaapmst3923a2_read_raw(struct iio_dev *indio_dev,
+				  struct iio_chan_spec const *chan,
+				  int *val, int *val2, long mask)
+{
+	struct eaapmst3923a2_data *data = iio_priv(indio_dev);
+	unsigned int lo, hi;
+	int ret;
+
+	if (mask != IIO_CHAN_INFO_RAW)
+		return -EINVAL;
+
+	switch (chan->type) {
+	case IIO_LIGHT:
+		ret = regmap_read(data->regmap, EAAPMST3923A2_REG_ALS_LOW, &lo);
+		if (ret < 0) return ret;
+		ret = regmap_read(data->regmap, EAAPMST3923A2_REG_ALS_HIGH, &hi);
+		if (ret < 0) return ret;
+		*val = (hi << 8) | lo;
+		return IIO_VAL_INT;
+
+	case IIO_PROXIMITY:
+		ret = regmap_read(data->regmap, EAAPMST3923A2_REG_PS_LOW, &lo);
+		if (ret < 0) return ret;
+		ret = regmap_read(data->regmap, EAAPMST3923A2_REG_PS_HIGH, &hi);
+		if (ret < 0) return ret;
+		*val = (hi << 8) | lo;
+		return IIO_VAL_INT;
+
+	default:
+		return -EINVAL;
+	}
+}
+
+/* Define the IIO channels */
+static const struct iio_chan_spec eaapmst3923a2_channels[] = {
+	{
+		.type = IIO_LIGHT,
+		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
+	},
+	{
+		.type = IIO_PROXIMITY,
+		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
+	},
+};
+
+static const struct iio_info eaapmst3923a2_info = {
+	.read_raw = eaapmst3923a2_read_raw,
+};
+
+/* I2C probe */
+static int eaapmst3923a2_probe(struct i2c_client *client,
+			       const struct i2c_device_id *id)
+{
+	struct iio_dev *indio_dev;
+	struct eaapmst3923a2_data *data;
+	struct regmap *regmap;
+	int ret;
+
+	regmap = devm_regmap_init_i2c(client, NULL);
+	if (IS_ERR(regmap))
+		return PTR_ERR(regmap);
+
+	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*data));
+	if (!indio_dev)
+		return -ENOMEM;
+
+	data = iio_priv(indio_dev);
+	data->client = client;
+	data->regmap = regmap;
+
+	indio_dev->dev.parent = &client->dev;
+	indio_dev->info = &eaapmst3923a2_info;
+	indio_dev->modes = INDIO_DIRECT_MODE;
+	indio_dev->channels = eaapmst3923a2_channels;
+	indio_dev->num_channels = ARRAY_SIZE(eaapmst3923a2_channels);
+
+	/* Enable ALS + PS (example, depends on datasheet init sequence) */
+	ret = i2c_smbus_write_byte_data(client, EAAPMST3923A2_REG_ENABLE, 0x03);
+	if (ret < 0)
+		return ret;
+	msleep(120);
+	return devm_iio_device_register(&client->dev, indio_dev);
+}
+
+static int eaapmst3923a2_remove(struct i2c_client *client)
+{
+	return 0;
+}
+
+static const struct i2c_device_id eaapmst3923a2_id[] = {
+	{ "eaapmst3923a2", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, eaapmst3923a2_id);
+
+static struct i2c_driver eaapmst3923a2_driver = {
+	.driver = {
+		.name = "eaapmst3923a2", .of_match_table = eaapmst3923a2_of_match,
+	},
+	.probe = eaapmst3923a2_probe,
+	.remove = eaapmst3923a2_remove,
+	.id_table = eaapmst3923a2_id,
+};
+module_i2c_driver(eaapmst3923a2_driver);
+
+MODULE_AUTHOR("Om Rathod");
+MODULE_DESCRIPTION("EAAPMST3923A2 Ambient Light + Proximity Sensor");
+MODULE_LICENSE("GPL");
+
diff --git a/drivers/iio/light/Kconfig b/drivers/iio/light/Kconfig
index b46eac71941c..f8d2c1d16c77 100644
--- a/drivers/iio/light/Kconfig
+++ b/drivers/iio/light/Kconfig
@@ -195,6 +195,13 @@ config GP2AP002
 	  To compile this driver as a module, choose M here: the
 	  module will be called gp2ap002.
 
+config EAAPMST3923A2
+    	tristate "EAAPMST3923A2 proximity and ambient sensor support"
+    	depends on I2C
+    	help
+      	  Say yes here to enable support for EAAPMST3923A2 sensor.
+
+
 config GP2AP020A00F
 	tristate "Sharp GP2AP020A00F Proximity/ALS sensor"
 	depends on I2C
diff --git a/drivers/iio/light/Makefile b/drivers/iio/light/Makefile
index d10912faf964..d117f6c4b38b 100644
--- a/drivers/iio/light/Makefile
+++ b/drivers/iio/light/Makefile
@@ -20,6 +20,7 @@ obj-$(CONFIG_CM3323)		+= cm3323.o
 obj-$(CONFIG_CM3605)		+= cm3605.o
 obj-$(CONFIG_CM36651)		+= cm36651.o
 obj-$(CONFIG_IIO_CROS_EC_LIGHT_PROX) += cros_ec_light_prox.o
+obj-$(CONFIG_EAAPMST3923A2) += eaapmst3923a2.o
 obj-$(CONFIG_GP2AP002)		+= gp2ap002.o
 obj-$(CONFIG_GP2AP020A00F)	+= gp2ap020a00f.o
 obj-$(CONFIG_HID_SENSOR_ALS)	+= hid-sensor-als.o
-- 
2.25.1

